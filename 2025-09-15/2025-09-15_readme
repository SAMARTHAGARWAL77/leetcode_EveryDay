🧠 Problem Name: Fully Typable Words on a Broken Keyboard
📅 Date: 2025-09-15

📌 Problem Description:

There is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly.

Given:

A string text consisting of words separated by a single space (no leading or trailing spaces).

A string brokenLetters containing all distinct letter keys that are broken.

Return the number of words in text that can be fully typed using this keyboard.

🔍 Examples:

Example 1:
Input: text = "hello world", brokenLetters = "ad"
Output: 1
Explanation: We cannot type "world" because the 'd' key is broken.

Example 2:
Input: text = "leet code", brokenLetters = "lt"
Output: 1
Explanation: We cannot type "leet" because the 'l' and 't' keys are broken.

Example 3:
Input: text = "leet code", brokenLetters = "e"
Output: 0
Explanation: We cannot type either word because the 'e' key is broken.

📌 Constraints:

1 <= text.length <= 10⁴

0 <= brokenLetters.length <= 26

text consists of words separated by a single space without any leading or trailing spaces.

Each word only consists of lowercase English letters.

brokenLetters consists of distinct lowercase English letters.

🚀 Approach:

Convert brokenLetters into a Set for O(1) lookup.

Split text by spaces to get individual words.

For each word:

Check if it contains any character in brokenLetters.

If it doesn't, increment a counter.

Return the counter.

📊 Complexity Analysis:

🔁 Time	O(N * L) — where N = number of words, L = average word length	
🧠 Space	O(B) — where B = number of broken letters